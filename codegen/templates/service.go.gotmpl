package {{.PkgName}}

import (
    "github.com/ronaksoft/ronykit"
    "github.com/ronaksoft/ronykit/std/service"
    "github.com/ronaksoft/ronykit/std/contract"
    "github.com/ronaksoft/ronykit/std/bundle/rest"
)

/*
    This Code is Auto-Generated by RonyDESC. Please DO NOT EDIT.
    Generated at:
*/

{{range .Services}}
    // I{{.Name}} define the interface which MUST be implemented.
    type I{{.Name}} interface {
    {{range .Contracts -}}
        {{.Name}}(ctx *ronykit.Context)
    {{end -}}
    }

    {{$wrapperName := print (camel .Name) "Wrapper"}}
    // {{$wrapperName}}
    type {{$wrapperName}} struct {
        svc I{{.Name}}
        pre []ronykit.Handler
        post []ronykit.Handler
    }

    {{range .Contracts}}
        {{$contract := .}}
        func (x {{$wrapperName}}) {{camel .Name}}Contract() ronykit.Contract {
            return contract.New().
            SetSelector(
                {{- range .Rests }}
                    rest.Route("{{.Method}}", "{{.Path}}").
                        WithFactory(
                            func() ronykit.Message {
                                return &{{$contract.Input.Name}}{}
                            },
                        ),
                {{- end }}
            ).
            SetHandler(x.svc.{{$contract.Name}})
        }
    {{end}}


    func (x *{{$wrapperName}}) SetPreHandler(h ...ronykit.Handler) *{{$wrapperName}} {
        x.pre = append(x.pre, h...)

        return x
    }

    func (x *{{$wrapperName}}) SetPostHandler(h ...ronykit.Handler) *{{$wrapperName}} {
        x.post = append(x.post, h...)

        return x
    }

    func (x {{$wrapperName}}) Service() ronykit.Service {
        return service.New("{{.Name}}").
            {{range .Contracts}}
                AddContract(x.{{camel .Name}}Contract()).
            {{end}}
            SetPreHandlers(x.pre...).
            SetPostHandlers(x.post...)
    }

    func New{{.Name}}(svc I{{.Name}}) *{{$wrapperName}} {
        return &{{$wrapperName}}{
            svc: svc,
        }
    }
{{end}}

